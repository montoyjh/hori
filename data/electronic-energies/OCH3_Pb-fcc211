(dp0
S'path'
p1
S'/home/camp/anpet/20100415_scaling/OCH3/runs/Pb/B'
p2
sS'electronic energy'
p3
F-57710.3130409
sS'calculation script'
p4
S'#!/usr/bin/env python\n\n#PBS -q verylong\n#PBS -r n\n#PBS -l nodes=4:ppn=8\n#PBS -m a\n#PBS -M andypeterson@gmail.com\n#PBS -V\n\nfrom numpy import sqrt\nfrom numpy import arctan as atan\n\nfrom ase import *\nfrom ase.calculators.jacapo import Jacapo\nfrom ase.vibrations import Vibrations\n\nfrom personal.ase import rotate_into_axis\n\n##################\n# Slab ###########\n##################\nlc = 5.1\nel = \'Pb\'\ncell=[(lc*(3/sqrt(2.)), 0, 0),\n      (0, sqrt(3.)*lc, 0),\n      (0, 0, 5.0716185983827495*lc)]\nslab = Atoms([Atom(el, ([ 0.000000,  0.000000,  0.000000]),tag=1),\n              Atom(el, ([ 0.333333,  0.000000,  0.000000]),tag=1),\n              Atom(el, ([ 0.666667,  0.000000,  0.000000]),tag=1),\n              Atom(el, ([ 0.166666,  0.666667, -0.040248]),tag=1),\n              Atom(el, ([ 0.500000,  0.666667, -0.040248]),tag=1),\n              Atom(el, ([ 0.833333,  0.666667, -0.040248]),tag=1),\n              Atom(el, ([ 0.000000,  0.333333, -0.080497]),tag=1),\n              Atom(el, ([ 0.333333,  0.333333, -0.080497]),tag=1),\n              Atom(el, ([ 0.666667,  0.333333, -0.080497]),tag=1),\n              Atom(el, ([ 0.166666,  0.000000, -0.120745]),tag=0),\n              Atom(el, ([ 0.500000,  0.000000, -0.120745]),tag=0),\n              Atom(el, ([ 0.833333,  0.000000, -0.120745]),tag=0),\n              Atom(el, ([ 0.000000,  0.666667, -0.160993]),tag=0),\n              Atom(el, ([ 0.333333,  0.666667, -0.160993]),tag=0),\n              Atom(el, ([ 0.666667,  0.666667, -0.160993]),tag=0),\n              Atom(el, ([ 0.166666,  0.333333, -0.201242]),tag=0),\n              Atom(el, ([ 0.500000,  0.333333, -0.201242]),tag=0),\n              Atom(el, ([ 0.833333,  0.333333, -0.201242]),tag=0),\n              Atom(el, ([ 0.000000,  0.000000, -0.241490]),tag=0),\n              Atom(el, ([ 0.333333,  0.000000, -0.241490]),tag=0),\n              Atom(el, ([ 0.666667,  0.000000, -0.241490]),tag=0),\n              Atom(el, ([ 0.166666,  0.666667, -0.281738]),tag=0),\n              Atom(el, ([ 0.500000,  0.666667, -0.281738]),tag=0),\n              Atom(el, ([ 0.833333,  0.666667, -0.281738]),tag=0),\n              Atom(el, ([ 0.000000,  0.333333, -0.321987]),tag=0),\n              Atom(el, ([ 0.333333,  0.333333, -0.321987]),tag=0),\n              Atom(el, ([ 0.666667,  0.333333, -0.321987]),tag=0)])\nslab.set_cell(cell,scale_atoms=True)\n\n##################\n# Adsorbate ######\n##################\n\ndef add_adsorbate():\n    """Adds the adsorbate to the slab."""\n    ads.rattle()\n    for atom in ads:\n        slab.append(atom)\n\n# Build the adsorbate\nb = slab[1].get_x()\ns_CO = 1.43 # A, C-O bond length\ns_OH = 0.94 # A, O-H bond length\ns_CH = 1.1 # A, C-H bond length\nd_CO = 1.217 # A, C=O bond length\nads = molecule(\'CH4\')\nrotate_into_axis(ads,4,axis=\'z\')\nads[4].set_symbol(\'O\')\nads.translate(-ads[4].get_position())\n\nfor atom in ads:\n    atom.set_tag(2)\ngapx = slab[1].get_x()/2.\ngapy = (slab[6].get_y()-slab[9].get_y())\n\n# Custom translation or rotation parameters\nads.translate([1*gapx,0.,slab[0].get_z()+1.5])\nadd_adsorbate()\n\n##################\n# Calculation ####\n##################\n\nmask=[atom.get_tag() == 0 for atom in slab]\nslab.set_constraint(FixAtoms(mask=mask))\n\ncalc = Jacapo(nc=\'out.nc\', #nc output file\n                 pw=340.15, #planewave cutoff\n                 dw=500.00, #density cutoff\n                 nbands=None, # number of bands\n                 kpts=(4,4,1), # k points\n                 xc=\'RPBE\', #exchange correlation method\n                 ft=0.1, #Fermi temperature\n                 symmetry=True,\n                 dipole=True,\n                 spinpol=False,\n                 stay_alive=True\n                )\ncalc.set_convergence()\ncalc.set_dipole(status=True, mixpar=0.2, initval=0.0)\ncalc.set_psp(sym=\'Pb\',psp=\'/home/camp/anpet/common/uspp/pb_ps.uspp\')\ncalc.set_psp(sym=\'Tl\',psp=\'/home/camp/anpet/common/uspp/tl_ps.uspp\')\ncalc.set_ncoutput(wf=\'No\',cd=\'No\',efp=\'No\',esp=\'No\')\n\nslab.set_calculator(calc)\n\ndyn = QuasiNewton(slab,logfile=\'qn.log\',trajectory=\'qn.traj\')\ndyn.run(fmax=0.05)\n\n\ne_adsorbed = slab.get_potential_energy()\nprint e_adsorbed\n\n\nf = open(\'out.energy\',\'w\')\nf.write(str(e_adsorbed))\nf.close()\n\n'
p5
sS'author'
p6
S'AAP'
p7
s.