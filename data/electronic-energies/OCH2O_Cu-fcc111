(dp0
S'remark'
p1
NsS'author'
p2
S'WJD'
p3
sS'electronic energy'
p4
F-46257.098527000002
sS'vibrations'
p5
cnumpy.core.multiarray
_reconstruct
p6
(cnumpy
ndarray
p7
(I0
tp8
S'b'
p9
tp10
Rp11
(I1
(I15
tp12
cnumpy
dtype
p13
(S'c16'
p14
I0
I1
tp15
Rp16
(I3
S'<'
p17
NNNI-1
I-1
I0
tp18
bI00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x17\xc1\xf7\x94\x14\x0e\x84?\xc3\x90\xe1\xd6\x93\xffo?\x00\x00\x00\x00\x00\x00\x00\x00 \t\xa9\xc6)"\x99?\x00\x00\x00\x00\x00\x00\x00\x00}\x8f\x13yLI\xa1?\x00\x00\x00\x00\x00\x00\x00\x00\x8f\x03\x94\xae\x0c%\xa2?\x00\x00\x00\x00\x00\x00\x00\x00=BtR\xa1\xe4\xa5?\x00\x00\x00\x00\x00\x00\x00\x00\x87\xf6\x07\x0fu\xae\xb2?\x00\x00\x00\x00\x00\x00\x00\x00+o\xdb\x90V\x15\xbb?\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x9a79\xbc\xac\xc0?\x00\x00\x00\x00\x00\x00\x00\x00\x03\x88\xdd\xfd\x00\xd9\xc0?\x00\x00\x00\x00\x00\x00\x00\x00:\x96\xc4\xb0\x90\xcf\xc2?\x00\x00\x00\x00\x00\x00\x00\x00\x93\xf9at\x0fZ\xc5?\x00\x00\x00\x00\x00\x00\x00\x00\xa3\xc4\x95\x19H\xfd\xc6?\x00\x00\x00\x00\x00\x00\x00\x00Yu\xd3\\\xfc\xee\xd6?\x00\x00\x00\x00\x00\x00\x00\x00d<)\xcc\r\x15\xd7?\x00\x00\x00\x00\x00\x00\x00\x00'
p19
tp20
bsS'calculation script'
p21
S'#!/usr/bin/env python\n\n#PBS -q verylong\n#PBS -r n\n#PBS -l nodes=1:ppn=8\n#PBS -m a\n#PBS -M andypeterson@gmail.com\n#PBS -V\n\nfrom ase import read,view,FixAtoms,QuasiNewton\nfrom ase.calculators.jacapo import Jacapo\nfrom ase.vibrations import Vibrations\n\n\nname = "Cu111_H2CO2_2_fcc"\nvibrateatoms = [27,28,29,30,31] # For free energy calculation\nfreeatoms = [0,1,2,3,4,5,6,7,8,27,28,29,30,31] # For optimization calculation\n\n# Open the slab with adsorbate from an old simulation.\nslab = read(\'H2CO2_2_fcc.traj\')\n\n# Fix the atoms to not be optimized, give the rest random perturbations\n# to break any artificial symmetry.\nmask = [True for atom in slab]\nfor free in freeatoms: # free atoms for optimizer\n    mask[free] = False\nslab.set_constraint(FixAtoms(mask=mask))\n\n# Introduce random perturbations to the free atoms\n# NOTE: I removed this since it is not a standard part of ASE\n# but is a personal part of the code in AAP\'s modules\n#perturbfreeatoms(atoms=slab,max=0.05)\n\ncalc = Jacapo(nc=name + \'.nc\', #nc output file\n                 pw=340.15, #planewave cutoff\n                 dw=500.00, #density cutoff\n                 nbands=None, # number of bands\n                 kpts=(4,4,1), # k points\n                 xc=\'RPBE\', #exchange correlation method\n                 ft=0.1, #Fermi temperature\n                 symmetry=True,\n                 spinpol=False,\n                 stay_alive=True,\n                 convergence={\'energy\':0.00001,\n                              \'density\':0.0001,\n                              \'occupation\':0.001,\n                              \'maxsteps\':None,\n                              \'maxtime\':None}, \n                 dipole={\'status\':True,\n                           \'mixpar\':0.2,\n                           \'initval\':0.0},\n\n                )\n\n\nslab.set_calculator(calc)\n\ndyn = QuasiNewton(slab,logfile=\'out.log\',trajectory=\'out.traj\')\ndyn.run(fmax=0.05)\n\ne_adsorbed = slab.get_potential_energy()\nprint e_adsorbed\n\nf = open(name + \'.energy\',\'w\')\nf.write(str(e_adsorbed))\nf.close()\n\n\n# Calculate vibrations\nvib = Vibrations(slab,indices=vibrateatoms)\nvib.run()\nvib.summary(method=\'standard\')\n\n# Make trajectory files to visualize the modes.\nfor mode in range(len(vibrateatoms)*3):\n    vib.write_mode(mode)\n\n\n'
p22
sS'path'
p23
S'/home/camp/anpet/20100914_Cu_100_101/Cu111/H2CO2_2_ads/fcc'
p24
s.